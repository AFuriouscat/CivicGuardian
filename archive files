import streamlit as st
from components import login, footer, profile
from pages import dashboard, rights_assistant, report_center, scorecard, admin_panel
from streamlit_option_menu import option_menu

st.set_page_config(page_title="CivicGuardian", layout="wide")

# -----------------------------
# Session State Setup
# -----------------------------
if 'authenticated' not in st.session_state:
    st.session_state.authenticated = False
    st.session_state.is_admin = False
    st.session_state.username = ""
    st.session_state.active_tab = "dashboard"  # default tab

# -----------------------------
# Header
# -----------------------------
st.markdown(f"""
    <div style='background-color:#003366;padding:1rem;'>
        <div style='display:flex;justify-content:space-between;align-items:center;'>
            <div style='color:white;font-size:1.5rem;font-weight:bold;'>CivicGuardian</div>
            <div style='color:white;'>
                {"üë§ " + st.session_state.username if st.session_state.authenticated else "üîê Guest"}
            </div>
        </div>
    </div>
""", unsafe_allow_html=True)

# -----------------------------
# Horizontal Navigation
# -----------------------------
# Determine available menu items based on authentication

menu_items = [
    {"label": "Dashboard", "value": "dashboard", "icon": "speedometer"},
    {"label": "Rights Assistant", "value": "rights", "icon": "shield-lock"},
    {"label": "Report Center", "value": "report", "icon": "clipboard-data"},
    {"label": "Scorecard", "value": "scorecard", "icon": "bar-chart"},
]

if st.session_state.is_admin:
    menu_items.append({"label": "Admin Panel", "value": "admin", "icon": "tools"})

# Append Profile/Login as the last item
profile_label = "üë§ Profile" if st.session_state.authenticated else "üîê LOGIN"
menu_items.append({"label": profile_label, "value": "profile", "icon": "person-circle"})

# Extract labels, icons, and values
labels = [item["label"] for item in menu_items]
icons = [item["icon"] for item in menu_items]
values = [item["value"] for item in menu_items]

# Render the horizontal menu
selected_tab = option_menu(
    menu_title=None,
    options=labels,
    icons=icons,
    orientation="horizontal",
    default_index=0
)

# Set the corresponding internal tab key
st.session_state.active_tab = values[labels.index(selected_tab)]
# -----------------------------
# Tab Buttons (No Page Reload)
# -----------------------------
tab_cols = st.columns(5 + int(st.session_state.is_admin))
with tab_cols[0]:
    if st.button("Dashboard"):
        st.session_state.active_tab = "dashboard"
with tab_cols[1]:
    if st.button("Rights Assistant"):
        st.session_state.active_tab = "rights"
with tab_cols[2]:
    if st.button("Report Center"):
        st.session_state.active_tab = "report"
with tab_cols[3]:
    if st.button("Scorecard"):
        st.session_state.active_tab = "scorecard"
if st.session_state.is_admin:
    with tab_cols[4]:
        if st.button("Admin Panel"):
            st.session_state.active_tab = "admin"

# Dynamic Login/Profile Button
with tab_cols[-1]:
    label = "üë§ Profile" if st.session_state.authenticated else "üîê LOGIN"
    if st.button(label):
        st.session_state.active_tab = "profile"

# -----------------------------
# Page Routing
# -----------------------------
tab = st.session_state.active_tab
if tab == "dashboard":
    dashboard.show()
elif tab == "rights":
    rights_assistant.show()
elif tab == "report":
    report_center.show()
elif tab == "scorecard":
    scorecard.show()
elif tab == "admin" and st.session_state.is_admin:
    admin_panel.show()
elif tab == "profile":
    # If not authenticated, show login
    if not st.session_state.authenticated:
        login.show_login()
    else:
        profile.show()

# -----------------------------
# Footer
# -----------------------------
st.markdown("""
    <div style='background-color:#003366;padding:2rem;margin-top:3rem;color:white;'>
        <div style='display:flex;justify-content:space-between;flex-wrap:wrap;'>
            <div>
                <h4>Stay Connected</h4>
                <a href='https://facebook.com' target='_blank' style='margin-right:10px;'>üìò</a>
                <a href='https://twitter.com' target='_blank' style='margin-right:10px;'>üê¶</a>
                <a href='https://youtube.com' target='_blank' style='margin-right:10px;'>‚ñ∂Ô∏è</a>
                <a href='https://instagram.com' target='_blank'>üì∏</a>
            </div>
            <div>
                <h4>Links</h4>
                <a href='#' style='color:white;display:block;'>About Us & Legal Info</a>
                <a href='#' style='color:white;display:block;'>Contact Us</a>
                <a href='#' style='color:white;display:block;'>Privacy Policy</a>
                <a href='#' style='color:white;display:block;'>Terms of Use</a>
                <a href='#' style='color:white;display:block;'>Equal Opportunity</a>
            </div>
            <div style='text-align:right;'>
                <p>By: Hack Pack 2025</p>
            </div>
        </div>
    </div>
""", unsafe_allow_html=True)









import streamlit as st
from components import login, footer, profile
from pages import dashboard, rights_assistant, report_center, scorecard

st.set_page_config(page_title="CivicGuardian", layout="wide")

# Session State Setup
if 'authenticated' not in st.session_state:
    st.session_state.authenticated = False
    st.session_state.is_admin = False
    st.session_state.username = ""
    st.session_state.active_tab = "dashboard"  # default tab

# --- CSS for full width + header styling + buttons as tabs ---
st.markdown("""
<style>
/* Override Streamlit container width */
.css-1d391kg { 
    max-width: 100vw !important;
    padding-left: 0rem !important;
    padding-right: 0rem !important;
    margin-left: 0rem !important;
    margin-right: 0rem !important;
}

/* Header container */
.header-footer {
    width: 100vw;
    background-color: #003366;
    padding: 0.5rem 2rem;
    color: white;
    box-sizing: border-box;
    display: flex;
    align-items: center;
    gap: 1rem;
}

/* Logo styling */
.header-logo {
    font-size: 1.5rem;
    font-weight: bold;
    white-space: nowrap;
}

/* Tabs container takes all space between logo and login */
.tabs-container {
    display: flex;
    gap: 1rem;
    flex-grow: 1;
    align-items: center;
    overflow-x: auto; /* scroll if many tabs */
}

/* Tab buttons */
.tab-button {
    background-color: transparent;
    border: none;
    color: white;
    font-weight: 600;
    font-size: 1rem;
    cursor: pointer;
    padding: 0.5rem 1rem;
    border-radius: 4px;
    transition: background-color 0.3s ease;
    white-space: nowrap;
}

.tab-button:hover {
    background-color: rgba(255,255,255,0.2);
}

.tab-button-active {
    background-color: #00509e;
    font-weight: 700;
}

/* Login/Profile button */
.login-button {
    background-color: transparent;
    border: 1.5px solid white;
    color: white;
    font-weight: 600;
    font-size: 1rem;
    cursor: pointer;
    padding: 0.35rem 1rem;
    border-radius: 6px;
    transition: background-color 0.3s ease;
    white-space: nowrap;
}

.login-button:hover {
    background-color: white;
    color: #003366;
}
</style>
""", unsafe_allow_html=True)

# Tabs list
tabs = [
    ("DASHBOARD", "dashboard"),
    ("REPORT", "report"),
    ("ASSISTANT", "rights"),
    ("SCORECARD", "scorecard"),
    ("ABOUT", "about"),
    ("CONTACT US", "contact"),
]

# Login/Profile label and target tab
login_label = "üë§ Profile" if st.session_state.authenticated else "üîê LOGIN"
login_tab = "profile"

# --- Render header ---
header_html = f"""
<div class="header-footer">
    <div class="header-logo">CivicGuardian</div>
    <div class="tabs-container">
"""

# Create tab buttons html with active class
for label, value in tabs:
    active_class = "tab-button-active" if st.session_state.active_tab == value else ""
    # We can't do onclick JS to update session_state, so we will use st.button below
    # But for now just output buttons with unique keys so we can create st.buttons in Python
    header_html += f'<button class="tab-button {active_class}" id="tab-{value}">{label}</button>'

header_html += f"""
    </div>
    <button class="login-button" id="tab-{login_tab}">{login_label}</button>
</div>
"""

# Inject header html
st.markdown(header_html, unsafe_allow_html=True)

# --- Handle tab button clicks with st.button ---

# Create a container for invisible Streamlit buttons (to detect clicks)
with st.container():
    # Create one st.button per tab with same label and keys (unique keys)
    for label, value in tabs:
        clicked = st.button(label, key=f"btn-{value}", help=f"Switch to {label} tab")
        if clicked:
            st.session_state.active_tab = value
            st.rerun()
    # Login/Profile button
    clicked_login = st.button(login_label, key="btn-profile", help="Login or profile")
    if clicked_login:
        st.session_state.active_tab = login_tab
        st.rerun()

# --- Page Routing ---
tab = st.session_state.active_tab

if tab == "dashboard":
    dashboard.show()
elif tab == "report":
    report_center.show()
elif tab == "rights" or tab == "assistant":
    rights_assistant.show()
elif tab == "scorecard":
    scorecard.show()
elif tab == "about":
    st.markdown("<h1>About Us</h1><p>Put your About page content here.</p>", unsafe_allow_html=True)
elif tab == "contact":
    st.markdown("<h1>Contact Us</h1><p>Put your Contact page content here.</p>", unsafe_allow_html=True)
elif tab == "admin" and st.session_state.is_admin:
    admin_panel.show()
elif tab == "profile":
    if not st.session_state.authenticated:
        login.show_login()
    else:
        profile.show()

# --- Footer ---
footer_html = """
    <div class='header-footer' style='padding: 2rem; margin-top: 3rem;'>
        <div style='display:flex;justify-content:space-between;flex-wrap:wrap;'>
            <div>
                <h4>Stay Connected</h4>
                <a href='https://facebook.com' target='_blank' style='margin-right:10px;'>üìò</a>
                <a href='https://twitter.com' target='_blank' style='margin-right:10px;'>üê¶</a>
                <a href='https://youtube.com' target='_blank' style='margin-right:10px;'>‚ñ∂Ô∏è</a>
                <a href='https://instagram.com' target='_blank'>üì∏</a>
            </div>
            <div>
                <h4>Links</h4>
                <a href='#' style='color:white;display:block;'>About Us & Legal Info</a>
                <a href='#' style='color:white;display:block;'>Contact Us</a>
                <a href='#' style='color:white;display:block;'>Privacy Policy</a>
                <a href='#' style='color:white;display:block;'>Terms of Use</a>
                <a href='#' style='color:white;display:block;'>Equal Opportunity</a>
            </div>
            <div style='text-align:right;'>
                <p>By: Hack Pack 2025</p>
            </div>
        </div>
    </div>
"""
st.markdown(footer_html, unsafe_allow_html=True)







# pages/rights_assistant.py
import streamlit as st
from PIL import Image
from components import footer
from utils.gemini_helper import get_legal_answer

def show():
    st.markdown("<h2>üõ°Ô∏è Rights Assistant</h2>", unsafe_allow_html=True)
    st.markdown("#### Ask a legal question to CivGuardian Bot!")
    st.markdown(
        "<small style='color:gray;'>Disclaimer: CivicGuardian Bot is powered by AI and may generate inaccurate information. Please verify with a legal professional.</small>",
        unsafe_allow_html=True
    )

    left_col, right_col = st.columns([2, 1])

    with left_col:
        if "chat_history" not in st.session_state:
            st.session_state.chat_history = []

        if "language" not in st.session_state:
            st.session_state.language = "English"

        st.session_state.language = st.selectbox(
            "Language", ["English", "Filipino"],
            index=["English", "Filipino"].index(st.session_state.language)
        )

        # Inject CSS for the scrollable chat container
        st.markdown("""
            <style>
            .chat-container {
                height: 400px;
                overflow-y: auto;
                background-color: #f9f9f9;
                padding: 1rem;
                border-radius: 10px;
                border: 1px solid #ddd;
                display: flex;
                flex-direction: column;
            }
            .user-msg {
                align-self: flex-end;
                background-color: #DCF8C6;
                padding: 0.75rem;
                border-radius: 12px;
                max-width: 75%;
                margin-bottom: 10px;
                word-wrap: break-word;
            }
            .bot-msg {
                align-self: flex-start;
                background-color: #ffffff;
                border: 1px solid #ccc;
                padding: 0.75rem;
                border-radius: 12px;
                max-width: 75%;
                margin-bottom: 10px;
                word-wrap: break-word;
            }
            </style>
        """, unsafe_allow_html=True)

        # Render chat history inside scrollable div
        chat_html = "<div class='chat-container'>"
        for msg in st.session_state.chat_history:
            if msg["role"] == "user":
                chat_html += f"<div class='user-msg'>{msg['content']}</div>"
            else:
                chat_html += f"<div class='bot-msg'>{msg['content']}</div>"
        chat_html += "</div>"
        st.markdown(chat_html, unsafe_allow_html=True)

        # Input and send in one line
        with st.form("chat_input", clear_on_submit=True):
            col1, col2 = st.columns([8, 2])
            with col1:
                user_input = st.text_input("You:", key="chat_text_input", label_visibility="collapsed")
            with col2:
                submitted = st.form_submit_button("Send")

            if submitted and user_input.strip():
                st.session_state.chat_history.append({"role": "user", "content": user_input})
                with st.spinner("Gemini is thinking..."):
                    gemini_response = get_legal_answer(user_input)
                    st.session_state.chat_history.append({"role": "bot", "content": gemini_response})
                st.rerun()

    with right_col:
        image = Image.open("assets/assistant-page.jpg")
        width, height = image.size
        desired_ratio = 3 / 4
        if height / width > desired_ratio:
            new_height = int(width * desired_ratio)
            top = (height - new_height) // 2
            bottom = top + new_height
            left = 0
            right = width
        else:
            new_width = int(height / desired_ratio)
            left = (width - new_width) // 2
            right = left + new_width
            top = 0
            bottom = height
        cropped = image.crop((left, top, right, bottom))
        st.image(cropped, use_container_width=True)

    st.divider()










# pages/rights_assistant.py
import streamlit as st
from PIL import Image
from components import footer
from utils.gemini_helper import get_legal_answer

def show():
    st.markdown("<h2>üõ°Ô∏è Rights Assistant</h2>", unsafe_allow_html=True)
    st.markdown("#### Ask a legal question to CivGuardian Bot!")
    st.markdown(
        "<small style='color:gray;'>Disclaimer: CivicGuardian Bot is powered by AI and may generate inaccurate information. Please verify with a legal professional.</small>",
        unsafe_allow_html=True
    )

    left_col, right_col = st.columns([2, 1])

    with left_col:
        if "chat_history" not in st.session_state:
            st.session_state.chat_history = []

        if "language" not in st.session_state:
            st.session_state.language = "English"

        st.session_state.language = st.selectbox(
            "Language", ["English", "Filipino"],
            index=["English", "Filipino"].index(st.session_state.language)
        )

        # Inject CSS for the scrollable chat container
        st.markdown("""
            <style>
            .chat-container {
                height: 400px;
                overflow-y: auto;
                background-color: #f9f9f9;
                padding: 1rem;
                border-radius: 10px;
                border: 1px solid #ddd;
                display: flex;
                flex-direction: column;
            }
            .user-msg {
                align-self: flex-end;
                background-color: #DCF8C6;
                padding: 0.75rem;
                border-radius: 12px;
                max-width: 75%;
                margin-bottom: 10px;
                word-wrap: break-word;
            }
            .bot-msg {
                align-self: flex-start;
                background-color: #ffffff;
                border: 1px solid #ccc;
                padding: 0.75rem;
                border-radius: 12px;
                max-width: 75%;
                margin-bottom: 10px;
                word-wrap: break-word;
            }
            </style>
        """, unsafe_allow_html=True)

        # Render chat history inside scrollable div
        chat_html = "<div class='chat-container'>"
        for msg in st.session_state.chat_history:
            if msg["role"] == "user":
                chat_html += f"<div class='user-msg'>{msg['content']}</div>"
            else:
                chat_html += f"<div class='bot-msg'>{msg['content']}</div>"
        chat_html += "</div>"
        st.markdown(chat_html, unsafe_allow_html=True)

        # Input and send in one line
        with st.form("chat_input", clear_on_submit=True):
            col1, col2 = st.columns([8, 2])
            with col1:
                user_input = st.text_input("You:", key="chat_text_input", label_visibility="collapsed")
            with col2:
                submitted = st.form_submit_button("Send")

            if submitted and user_input.strip():
                st.session_state.chat_history.append({"role": "user", "content": user_input})
                with st.spinner("Gemini is thinking..."):
                    gemini_response = get_legal_answer(user_input)
                    st.session_state.chat_history.append({"role": "bot", "content": gemini_response})
                st.rerun()

    with right_col:
        image = Image.open("assets/assistant-page.jpg")
        width, height = image.size
        desired_ratio = 3 / 4
        if height / width > desired_ratio:
            new_height = int(width * desired_ratio)
            top = (height - new_height) // 2
            bottom = top + new_height
            left = 0
            right = width
        else:
            new_width = int(height / desired_ratio)
            left = (width - new_width) // 2
            right = left + new_width
            top = 0
            bottom = height
        cropped = image.crop((left, top, right, bottom))
        st.image(cropped, use_container_width=True)

    st.divider()



import streamlit as st

from custom_pages import dashboard, rights_assistant, report_center, scorecard, admin_panel
from PIL import Image
def show():
    
    cards = [
        {"title": "üì¢ Report an Incident", "button": "Go to Report", "key": "go_report", "page_func": report_center.show},
        {"title": "ü§ñ AI Assistant", "button": "Ask Assistant", "key": "go_rights", "page_func": rights_assistant.show},
        {"title": "üìä Justice Dashboard", "button": "View Dashboard", "key": "go_dashboard", "page_func": dashboard.show},
        {"title": "üèõ Institution Scorecard", "button": "View Scorecard", "key": "go_scorecard", "page_func": scorecard.show},
    ]

    # Initialize session state for navigation
    if "current_page" not in st.session_state:
        st.session_state.current_page = "about"

    # Navigation rendering
    if st.session_state.current_page != "about":
        for card in cards:
            if card["key"] == st.session_state.current_page:
                # Add a "Back to About" button
                if st.button("‚¨ÖÔ∏è Back to About", key="back_to_about"):
                    st.session_state.current_page = "about"
                    st.rerun()

                # Call the selected page's function
                card["page_func"]()
                return

    # Styles for About page
    st.markdown("""
        <style>
        .hero {
            background-color: #003366;
            color: white;
            padding: 2rem;
            border-radius: 1rem;
            text-align: center;
            font-size: 2rem;
            margin: 2rem 5rem;
        }
        .card {
            background-color: #f2f2f2;
            border-radius: 1rem;
            padding: 2rem;
            text-align: center;
            height: 250px;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            box-shadow: 0px 2px 10px rgba(0,0,0,0.1);
            transition: transform 0.2s;
        }
        .card:hover {
            transform: translateY(-5px);
        }
        .card-title {
            font-size: 1.25rem;
            font-weight: bold;
        }
        </style>
    """, unsafe_allow_html=True)

    # Hero banner
    st.markdown("<div class='hero'>One platform to report, understand and monitor justice in your city.</div>", unsafe_allow_html=True)

    # 4-column layout of cards
    cols = st.columns(4)
    for col, card in zip(cols, cards):
        with col:
            st.markdown("<div class='card'>", unsafe_allow_html=True)
            st.markdown(f"<div class='card-title'>{card['title']}</div>", unsafe_allow_html=True)
            if st.button(card["button"], key=card["key"]):
                st.session_state.current_page = card["key"]
                st.rerun()
            st.markdown("</div>", unsafe_allow_html=True)
